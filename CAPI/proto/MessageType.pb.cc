// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageType.proto

#include "MessageType.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf
{
}  // namespace protobuf
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_MessageType_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_MessageType_2eproto = nullptr;
const uint32_t TableStruct_MessageType_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_MessageType_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\021MessageType.proto\022\010protobuf*x\n\tPlaceTy"
    "pe\022\023\n\017NULL_PLACE_TYPE\020\000\022\010\n\004LAND\020\001\022\010\n\004WAL"
    "L\020\002\022\t\n\005GRASS\020\003\022\r\n\tCLASSROOM\020\004\022\r\n\tBLACKRO"
    "OM\020\005\022\010\n\004GATE\020\006\022\017\n\013HIDDEN_GATE\020\007*8\n\tShape"
    "Type\022\023\n\017NULL_SHAPE_TYPE\020\000\022\n\n\006CIRCLE\020\001\022\n\n"
    "\006SQUARE\020\002*N\n\010PropType\022\022\n\016NULL_PROP_TYPE\020"
    "\000\022\n\n\006PTYPE1\020\001\022\n\n\006PTYPE2\020\002\022\n\n\006PTYPE3\020\003\022\n\n"
    "\006PTYPE4\020\004*f\n\017StudentBuffType\022\023\n\017NULL_SBU"
    "FF_TYPE\020\000\022\016\n\nSBUFFTYPE1\020\001\022\016\n\nSBUFFTYPE2\020"
    "\002\022\016\n\nSBUFFTYPE3\020\003\022\016\n\nSBUFFTYPE4\020\004*i\n\014Stu"
    "dentState\022\017\n\013NULL_STATUS\020\000\022\010\n\004IDLE\020\001\022\014\n\010"
    "LEARNING\020\002\022\010\n\004FAIL\020\003\022\r\n\tEMOTIONAL\020\004\022\010\n\004Q"
    "UIT\020\005\022\r\n\tGRADUATED\020\006*f\n\017TrickerBuffType\022"
    "\023\n\017NULL_TBUFF_TYPE\020\000\022\016\n\nTBUFFTYPE1\020\001\022\016\n\n"
    "TBUFFTYPE2\020\002\022\016\n\nTBUFFTYPE3\020\003\022\016\n\nTBUFFTYP"
    "E4\020\004*J\n\nPlayerType\022\024\n\020NULL_PLAYER_TYPE\020\000"
    "\022\022\n\016STUDENT_PLAYER\020\001\022\022\n\016TRICKER_PLAYER\020\002"
    "*l\n\013StudentType\022\025\n\021NULL_STUDENT_TYPE\020\000\022\020"
    "\n\014STUDENTTYPE1\020\001\022\020\n\014STUDENTTYPE2\020\002\022\020\n\014ST"
    "UDENTTYPE3\020\003\022\020\n\014STUDENTTYPE4\020\004*l\n\013Tricke"
    "rType\022\025\n\021NULL_TRICKER_TYPE\020\000\022\020\n\014TRICKERT"
    "YPE1\020\001\022\020\n\014TRICKERTYPE2\020\002\022\020\n\014TRICKERTYPE3"
    "\020\003\022\020\n\014TRICKERTYPE4\020\004*P\n\tGameState\022\023\n\017NUL"
    "L_GAME_STATE\020\000\022\016\n\nGAME_START\020\001\022\020\n\014GAME_R"
    "UNNING\020\002\022\014\n\010GAME_END\020\003b\006proto3";
static ::_pbi::once_flag descriptor_table_MessageType_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_MessageType_2eproto = {
    false,
    false,
    990,
    descriptor_table_protodef_MessageType_2eproto,
    "MessageType.proto",
    &descriptor_table_MessageType_2eproto_once,
    nullptr,
    0,
    0,
    schemas,
    file_default_instances,
    TableStruct_MessageType_2eproto::offsets,
    nullptr,
    file_level_enum_descriptors_MessageType_2eproto,
    file_level_service_descriptors_MessageType_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_MessageType_2eproto_getter()
{
    return &descriptor_table_MessageType_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_MessageType_2eproto(&descriptor_table_MessageType_2eproto);
namespace protobuf
{
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlaceType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[0];
    }
    bool PlaceType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[1];
    }
    bool ShapeType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[2];
    }
    bool PropType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StudentBuffType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[3];
    }
    bool StudentBuffType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StudentState_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[4];
    }
    bool StudentState_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrickerBuffType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[5];
    }
    bool TrickerBuffType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[6];
    }
    bool PlayerType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StudentType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[7];
    }
    bool StudentType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrickerType_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[8];
    }
    bool TrickerType_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                return true;
            default:
                return false;
        }
    }

    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_descriptor()
    {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MessageType_2eproto);
        return file_level_enum_descriptors_MessageType_2eproto[9];
    }
    bool GameState_IsValid(int value)
    {
        switch (value)
        {
            case 0:
            case 1:
            case 2:
            case 3:
                return true;
            default:
                return false;
        }
    }

    // @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
