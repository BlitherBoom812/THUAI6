// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Clients.proto

#include "Message2Clients.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf
{
    PROTOBUF_CONSTEXPR MessageOfHuman::MessageOfHuman(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.buff_)*/ {}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.speed_)*/ 0, /*decltype(_impl_.life_)*/ 0, /*decltype(_impl_.time_until_skill_available_)*/ 0, /*decltype(_impl_.hanged_time_)*/ 0, /*decltype(_impl_.place_)*/ 0, /*decltype(_impl_.prop_)*/ 0, /*decltype(_impl_.human_type_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.chair_time_)*/ 0, /*decltype(_impl_.on_chair_)*/ false, /*decltype(_impl_.on_ground_)*/ false, /*decltype(_impl_.view_range_)*/ 0, /*decltype(_impl_.ground_time_)*/ 0, /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.radius_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfHumanDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfHumanDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfHumanDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfHuman _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfHumanDefaultTypeInternal _MessageOfHuman_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfButcher::MessageOfButcher(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.buff_)*/ {}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.speed_)*/ 0, /*decltype(_impl_.damage_)*/ 0, /*decltype(_impl_.time_until_skill_available_)*/ 0, /*decltype(_impl_.place_)*/ 0, /*decltype(_impl_.prop_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.butcher_type_)*/ 0, /*decltype(_impl_.movable_)*/ false, /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.view_range_)*/ 0, /*decltype(_impl_.radius_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfButcherDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfButcherDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfButcherDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfButcher _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfButcherDefaultTypeInternal _MessageOfButcher_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfProp::MessageOfProp(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.place_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.size_)*/ 0, /*decltype(_impl_.is_moving_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfPropDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfPropDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfPropDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfProp _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfPropDefaultTypeInternal _MessageOfProp_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfPickedProp::MessageOfPickedProp(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.mapping_id_)*/ int64_t{0}, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfPickedPropDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfPickedPropDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfPickedPropDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfPickedProp _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfPickedPropDefaultTypeInternal _MessageOfPickedProp_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfMap_Row::MessageOfMap_Row(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.col_)*/ {}, /*decltype(_impl_._col_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfMap_RowDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfMap_RowDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfMap_RowDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfMap_Row _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMap_RowDefaultTypeInternal _MessageOfMap_Row_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfMap::MessageOfMap(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.row_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfMapDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfMapDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfMapDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfMap _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMapDefaultTypeInternal _MessageOfMap_default_instance_;
    PROTOBUF_CONSTEXPR MessageToClient::MessageToClient(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.human_message_)*/ {}, /*decltype(_impl_.butcher_message_)*/ {}, /*decltype(_impl_.prop_message_)*/ {}, /*decltype(_impl_.map_message_)*/ nullptr, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageToClientDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageToClientDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageToClientDefaultTypeInternal()
        {
        }
        union
        {
            MessageToClient _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
    PROTOBUF_CONSTEXPR MoveRes::MoveRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.actual_speed_)*/ int64_t{0}, /*decltype(_impl_.actual_angle_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MoveResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MoveResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MoveResDefaultTypeInternal()
        {
        }
        union
        {
            MoveRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveResDefaultTypeInternal _MoveRes_default_instance_;
    PROTOBUF_CONSTEXPR BoolRes::BoolRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.act_success_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct BoolResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR BoolResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~BoolResDefaultTypeInternal()
        {
        }
        union
        {
            BoolRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolResDefaultTypeInternal _BoolRes_default_instance_;
    PROTOBUF_CONSTEXPR MsgRes::MsgRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.message_received_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.from_player_id_)*/ int64_t{0}, /*decltype(_impl_.have_message_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MsgResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MsgResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MsgResDefaultTypeInternal()
        {
        }
        union
        {
            MsgRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgResDefaultTypeInternal _MsgRes_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_Message2Clients_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Message2Clients_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Message2Clients_2eproto = nullptr;

const uint32_t TableStruct_Message2Clients_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.life_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.hanged_time_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.time_until_skill_available_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.place_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.prop_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.human_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.on_chair_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.chair_time_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.on_ground_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.ground_time_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.view_range_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.radius_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHuman, _impl_.buff_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.damage_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.time_until_skill_available_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.place_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.prop_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.butcher_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.movable_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.view_range_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.radius_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfButcher, _impl_.buff_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.place_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.size_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfProp, _impl_.is_moving_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfPickedProp, _impl_.mapping_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _impl_.col_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.row_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.human_message_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.butcher_message_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.prop_message_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.map_message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_angle_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _impl_.act_success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MsgRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MsgRes, _impl_.have_message_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MsgRes, _impl_.from_player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MsgRes, _impl_.message_received_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::protobuf::MessageOfHuman)},
    {24, -1, -1, sizeof(::protobuf::MessageOfButcher)},
    {44, -1, -1, sizeof(::protobuf::MessageOfProp)},
    {58, -1, -1, sizeof(::protobuf::MessageOfPickedProp)},
    {69, -1, -1, sizeof(::protobuf::MessageOfMap_Row)},
    {76, -1, -1, sizeof(::protobuf::MessageOfMap)},
    {83, -1, -1, sizeof(::protobuf::MessageToClient)},
    {93, -1, -1, sizeof(::protobuf::MoveRes)},
    {101, -1, -1, sizeof(::protobuf::BoolRes)},
    {108, -1, -1, sizeof(::protobuf::MsgRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_MessageOfHuman_default_instance_._instance,
    &::protobuf::_MessageOfButcher_default_instance_._instance,
    &::protobuf::_MessageOfProp_default_instance_._instance,
    &::protobuf::_MessageOfPickedProp_default_instance_._instance,
    &::protobuf::_MessageOfMap_Row_default_instance_._instance,
    &::protobuf::_MessageOfMap_default_instance_._instance,
    &::protobuf::_MessageToClient_default_instance_._instance,
    &::protobuf::_MoveRes_default_instance_._instance,
    &::protobuf::_BoolRes_default_instance_._instance,
    &::protobuf::_MsgRes_default_instance_._instance,
};

const char descriptor_table_protodef_Message2Clients_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\025Message2Clients.proto\022\010protobuf\032\021Messa"
    "geType.proto\"\245\003\n\016MessageOfHuman\022\t\n\001x\030\001 \001"
    "(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005speed\030\003 \001(\005\022\014\n\004life\030\004 \001"
    "(\005\022\023\n\013hanged_time\030\005 \001(\005\022\"\n\032time_until_sk"
    "ill_available\030\006 \001(\001\022\"\n\005place\030\007 \001(\0162\023.pro"
    "tobuf.PlaceType\022 \n\004prop\030\010 \001(\0162\022.protobuf"
    ".PropType\022\'\n\nhuman_type\030\t \001(\0162\023.protobuf"
    ".HumanType\022\014\n\004guid\030\n \001(\003\022\020\n\010on_chair\030\013 \001"
    "(\010\022\022\n\nchair_time\030\014 \001(\001\022\021\n\ton_ground\030\r \001("
    "\010\022\023\n\013ground_time\030\016 \001(\001\022\021\n\tplayer_id\030\017 \001("
    "\003\022\022\n\nview_range\030\020 \001(\005\022\016\n\006radius\030\021 \001(\005\022%\n"
    "\004buff\030\022 \003(\0162\027.protobuf.HumanBuffType\"\335\002\n"
    "\020MessageOfButcher\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022"
    "\r\n\005speed\030\003 \001(\005\022\016\n\006damage\030\004 \001(\005\022\"\n\032time_u"
    "ntil_skill_available\030\005 \001(\001\022\"\n\005place\030\006 \001("
    "\0162\023.protobuf.PlaceType\022 \n\004prop\030\007 \001(\0162\022.p"
    "rotobuf.PropType\022+\n\014butcher_type\030\010 \001(\0162\025"
    ".protobuf.ButcherType\022\014\n\004guid\030\t \001(\003\022\017\n\007m"
    "ovable\030\n \001(\010\022\021\n\tplayer_id\030\013 \001(\003\022\022\n\nview_"
    "range\030\014 \001(\005\022\016\n\006radius\030\r \001(\005\022\'\n\004buff\030\016 \003("
    "\0162\031.protobuf.ButcherBuffType\"\264\001\n\rMessage"
    "OfProp\022 \n\004type\030\001 \001(\0162\022.protobuf.PropType"
    "\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\030\n\020facing_directi"
    "on\030\004 \001(\001\022\014\n\004guid\030\005 \001(\003\022\"\n\005place\030\006 \001(\0162\023."
    "protobuf.PlaceType\022\014\n\004size\030\007 \001(\005\022\021\n\tis_m"
    "oving\030\010 \001(\010\"{\n\023MessageOfPickedProp\022 \n\004ty"
    "pe\030\001 \001(\0162\022.protobuf.PropType\022\t\n\001x\030\002 \001(\005\022"
    "\t\n\001y\030\003 \001(\005\022\030\n\020facing_direction\030\004 \001(\001\022\022\n\n"
    "mapping_id\030\005 \001(\003\"`\n\014MessageOfMap\022\'\n\003row\030"
    "\002 \003(\0132\032.protobuf.MessageOfMap.Row\032\'\n\003Row"
    "\022 \n\003col\030\001 \003(\0162\023.protobuf.PlaceType\"\323\001\n\017M"
    "essageToClient\022/\n\rhuman_message\030\001 \003(\0132\030."
    "protobuf.MessageOfHuman\0223\n\017butcher_messa"
    "ge\030\002 \003(\0132\032.protobuf.MessageOfButcher\022-\n\014"
    "prop_message\030\003 \003(\0132\027.protobuf.MessageOfP"
    "rop\022+\n\013map_message\030\004 \001(\0132\026.protobuf.Mess"
    "ageOfMap\"5\n\007MoveRes\022\024\n\014actual_speed\030\001 \001("
    "\003\022\024\n\014actual_angle\030\002 \001(\001\"\036\n\007BoolRes\022\023\n\013ac"
    "t_success\030\001 \001(\010\"P\n\006MsgRes\022\024\n\014have_messag"
    "e\030\001 \001(\010\022\026\n\016from_player_id\030\002 \001(\003\022\030\n\020messa"
    "ge_received\030\003 \001(\tb\006proto3";
static const ::_pbi::DescriptorTable* const descriptor_table_Message2Clients_2eproto_deps[1] = {
    &::descriptor_table_MessageType_2eproto,
};
static ::_pbi::once_flag descriptor_table_Message2Clients_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Message2Clients_2eproto = {
    false,
    false,
    1625,
    descriptor_table_protodef_Message2Clients_2eproto,
    "Message2Clients.proto",
    &descriptor_table_Message2Clients_2eproto_once,
    descriptor_table_Message2Clients_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_Message2Clients_2eproto::offsets,
    file_level_metadata_Message2Clients_2eproto,
    file_level_enum_descriptors_Message2Clients_2eproto,
    file_level_service_descriptors_Message2Clients_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Message2Clients_2eproto_getter()
{
    return &descriptor_table_Message2Clients_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Message2Clients_2eproto(&descriptor_table_Message2Clients_2eproto);
namespace protobuf
{

    // ===================================================================

    class MessageOfHuman::_Internal
    {
    public:
    };

    MessageOfHuman::MessageOfHuman(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfHuman)
    }
    MessageOfHuman::MessageOfHuman(const MessageOfHuman& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfHuman* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.buff_){from._impl_.buff_}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.speed_){}, decltype(_impl_.life_){}, decltype(_impl_.time_until_skill_available_){}, decltype(_impl_.hanged_time_){}, decltype(_impl_.place_){}, decltype(_impl_.prop_){}, decltype(_impl_.human_type_){}, decltype(_impl_.guid_){}, decltype(_impl_.chair_time_){}, decltype(_impl_.on_chair_){}, decltype(_impl_.on_ground_){}, decltype(_impl_.view_range_){}, decltype(_impl_.ground_time_){}, decltype(_impl_.player_id_){}, decltype(_impl_.radius_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radius_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.radius_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfHuman)
    }

    inline void MessageOfHuman::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.buff_){arena}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.speed_){0}, decltype(_impl_.life_){0}, decltype(_impl_.time_until_skill_available_){0}, decltype(_impl_.hanged_time_){0}, decltype(_impl_.place_){0}, decltype(_impl_.prop_){0}, decltype(_impl_.human_type_){0}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.chair_time_){0}, decltype(_impl_.on_chair_){false}, decltype(_impl_.on_ground_){false}, decltype(_impl_.view_range_){0}, decltype(_impl_.ground_time_){0}, decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.radius_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfHuman::~MessageOfHuman()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfHuman)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfHuman::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.buff_.~RepeatedField();
    }

    void MessageOfHuman::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfHuman::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfHuman)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.buff_.Clear();
        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radius_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.radius_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfHuman::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 speed = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 life = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.life_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 hanged_time = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.hanged_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double time_until_skill_available = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49))
                    {
                        _impl_.time_until_skill_available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlaceType place = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_place(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PropType prop = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_prop(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.HumanType human_type = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_human_type(static_cast<::protobuf::HumanType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 10;
                case 10:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool on_chair = 11;
                case 11:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88))
                    {
                        _impl_.on_chair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double chair_time = 12;
                case 12:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97))
                    {
                        _impl_.chair_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool on_ground = 13;
                case 13:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104))
                    {
                        _impl_.on_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double ground_time = 14;
                case 14:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113))
                    {
                        _impl_.ground_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 player_id = 15;
                case 15:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 view_range = 16;
                case 16:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128))
                    {
                        _impl_.view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 radius = 17;
                case 17:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136))
                    {
                        _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.HumanBuffType buff = 18;
                case 18:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_buff(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 144)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_buff(static_cast<::protobuf::HumanBuffType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfHuman::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfHuman)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
        }

        // int32 life = 4;
        if (this->_internal_life() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_life(), target);
        }

        // int32 hanged_time = 5;
        if (this->_internal_hanged_time() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_hanged_time(), target);
        }

        // double time_until_skill_available = 6;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_time_until_skill_available = this->_internal_time_until_skill_available();
        uint64_t raw_time_until_skill_available;
        memcpy(&raw_time_until_skill_available, &tmp_time_until_skill_available, sizeof(tmp_time_until_skill_available));
        if (raw_time_until_skill_available != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_time_until_skill_available(), target);
        }

        // .protobuf.PlaceType place = 7;
        if (this->_internal_place() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this->_internal_place(), target
            );
        }

        // .protobuf.PropType prop = 8;
        if (this->_internal_prop() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                8, this->_internal_prop(), target
            );
        }

        // .protobuf.HumanType human_type = 9;
        if (this->_internal_human_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                9, this->_internal_human_type(), target
            );
        }

        // int64 guid = 10;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_guid(), target);
        }

        // bool on_chair = 11;
        if (this->_internal_on_chair() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_on_chair(), target);
        }

        // double chair_time = 12;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_chair_time = this->_internal_chair_time();
        uint64_t raw_chair_time;
        memcpy(&raw_chair_time, &tmp_chair_time, sizeof(tmp_chair_time));
        if (raw_chair_time != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_chair_time(), target);
        }

        // bool on_ground = 13;
        if (this->_internal_on_ground() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_on_ground(), target);
        }

        // double ground_time = 14;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_ground_time = this->_internal_ground_time();
        uint64_t raw_ground_time;
        memcpy(&raw_ground_time, &tmp_ground_time, sizeof(tmp_ground_time));
        if (raw_ground_time != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_ground_time(), target);
        }

        // int64 player_id = 15;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_player_id(), target);
        }

        // int32 view_range = 16;
        if (this->_internal_view_range() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_view_range(), target);
        }

        // int32 radius = 17;
        if (this->_internal_radius() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_radius(), target);
        }

        // repeated .protobuf.HumanBuffType buff = 18;
        {
            int byte_size = _impl_._buff_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    18, _impl_.buff_, byte_size, target
                );
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfHuman)
        return target;
    }

    size_t MessageOfHuman::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfHuman)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.HumanBuffType buff = 18;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_buff_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_buff(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 2 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._buff_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
        }

        // int32 life = 4;
        if (this->_internal_life() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_life());
        }

        // double time_until_skill_available = 6;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_time_until_skill_available = this->_internal_time_until_skill_available();
        uint64_t raw_time_until_skill_available;
        memcpy(&raw_time_until_skill_available, &tmp_time_until_skill_available, sizeof(tmp_time_until_skill_available));
        if (raw_time_until_skill_available != 0)
        {
            total_size += 1 + 8;
        }

        // int32 hanged_time = 5;
        if (this->_internal_hanged_time() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hanged_time());
        }

        // .protobuf.PlaceType place = 7;
        if (this->_internal_place() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_place());
        }

        // .protobuf.PropType prop = 8;
        if (this->_internal_prop() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_prop());
        }

        // .protobuf.HumanType human_type = 9;
        if (this->_internal_human_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_human_type());
        }

        // int64 guid = 10;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // double chair_time = 12;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_chair_time = this->_internal_chair_time();
        uint64_t raw_chair_time;
        memcpy(&raw_chair_time, &tmp_chair_time, sizeof(tmp_chair_time));
        if (raw_chair_time != 0)
        {
            total_size += 1 + 8;
        }

        // bool on_chair = 11;
        if (this->_internal_on_chair() != 0)
        {
            total_size += 1 + 1;
        }

        // bool on_ground = 13;
        if (this->_internal_on_ground() != 0)
        {
            total_size += 1 + 1;
        }

        // int32 view_range = 16;
        if (this->_internal_view_range() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::Int32Size(
                              this->_internal_view_range()
                          );
        }

        // double ground_time = 14;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_ground_time = this->_internal_ground_time();
        uint64_t raw_ground_time;
        memcpy(&raw_ground_time, &tmp_ground_time, sizeof(tmp_ground_time));
        if (raw_ground_time != 0)
        {
            total_size += 1 + 8;
        }

        // int64 player_id = 15;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int32 radius = 17;
        if (this->_internal_radius() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::Int32Size(
                              this->_internal_radius()
                          );
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfHuman::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfHuman::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfHuman::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfHuman::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfHuman*>(&to_msg);
        auto& from = static_cast<const MessageOfHuman&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfHuman)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.buff_.MergeFrom(from._impl_.buff_);
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_speed() != 0)
        {
            _this->_internal_set_speed(from._internal_speed());
        }
        if (from._internal_life() != 0)
        {
            _this->_internal_set_life(from._internal_life());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_time_until_skill_available = from._internal_time_until_skill_available();
        uint64_t raw_time_until_skill_available;
        memcpy(&raw_time_until_skill_available, &tmp_time_until_skill_available, sizeof(tmp_time_until_skill_available));
        if (raw_time_until_skill_available != 0)
        {
            _this->_internal_set_time_until_skill_available(from._internal_time_until_skill_available());
        }
        if (from._internal_hanged_time() != 0)
        {
            _this->_internal_set_hanged_time(from._internal_hanged_time());
        }
        if (from._internal_place() != 0)
        {
            _this->_internal_set_place(from._internal_place());
        }
        if (from._internal_prop() != 0)
        {
            _this->_internal_set_prop(from._internal_prop());
        }
        if (from._internal_human_type() != 0)
        {
            _this->_internal_set_human_type(from._internal_human_type());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_chair_time = from._internal_chair_time();
        uint64_t raw_chair_time;
        memcpy(&raw_chair_time, &tmp_chair_time, sizeof(tmp_chair_time));
        if (raw_chair_time != 0)
        {
            _this->_internal_set_chair_time(from._internal_chair_time());
        }
        if (from._internal_on_chair() != 0)
        {
            _this->_internal_set_on_chair(from._internal_on_chair());
        }
        if (from._internal_on_ground() != 0)
        {
            _this->_internal_set_on_ground(from._internal_on_ground());
        }
        if (from._internal_view_range() != 0)
        {
            _this->_internal_set_view_range(from._internal_view_range());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_ground_time = from._internal_ground_time();
        uint64_t raw_ground_time;
        memcpy(&raw_ground_time, &tmp_ground_time, sizeof(tmp_ground_time));
        if (raw_ground_time != 0)
        {
            _this->_internal_set_ground_time(from._internal_ground_time());
        }
        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_radius() != 0)
        {
            _this->_internal_set_radius(from._internal_radius());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfHuman::CopyFrom(const MessageOfHuman& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfHuman)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfHuman::IsInitialized() const
    {
        return true;
    }

    void MessageOfHuman::InternalSwap(MessageOfHuman* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.buff_.InternalSwap(&other->_impl_.buff_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfHuman, _impl_.radius_) + sizeof(MessageOfHuman::_impl_.radius_) - PROTOBUF_FIELD_OFFSET(MessageOfHuman, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfHuman::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[0]
        );
    }

    // ===================================================================

    class MessageOfButcher::_Internal
    {
    public:
    };

    MessageOfButcher::MessageOfButcher(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfButcher)
    }
    MessageOfButcher::MessageOfButcher(const MessageOfButcher& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfButcher* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.buff_){from._impl_.buff_}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.speed_){}, decltype(_impl_.damage_){}, decltype(_impl_.time_until_skill_available_){}, decltype(_impl_.place_){}, decltype(_impl_.prop_){}, decltype(_impl_.guid_){}, decltype(_impl_.butcher_type_){}, decltype(_impl_.movable_){}, decltype(_impl_.player_id_){}, decltype(_impl_.view_range_){}, decltype(_impl_.radius_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radius_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.radius_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfButcher)
    }

    inline void MessageOfButcher::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.buff_){arena}, /*decltype(_impl_._buff_cached_byte_size_)*/ {0}, decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.speed_){0}, decltype(_impl_.damage_){0}, decltype(_impl_.time_until_skill_available_){0}, decltype(_impl_.place_){0}, decltype(_impl_.prop_){0}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.butcher_type_){0}, decltype(_impl_.movable_){false}, decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.view_range_){0}, decltype(_impl_.radius_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfButcher::~MessageOfButcher()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfButcher)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfButcher::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.buff_.~RepeatedField();
    }

    void MessageOfButcher::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfButcher::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfButcher)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.buff_.Clear();
        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radius_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.radius_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfButcher::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 speed = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 damage = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double time_until_skill_available = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41))
                    {
                        _impl_.time_until_skill_available_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlaceType place = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_place(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PropType prop = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_prop(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.ButcherType butcher_type = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_butcher_type(static_cast<::protobuf::ButcherType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool movable = 10;
                case 10:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80))
                    {
                        _impl_.movable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 player_id = 11;
                case 11:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 view_range = 12;
                case 12:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96))
                    {
                        _impl_.view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 radius = 13;
                case 13:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104))
                    {
                        _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.ButcherBuffType buff = 14;
                case 14:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_buff(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 112)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_buff(static_cast<::protobuf::ButcherBuffType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfButcher::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfButcher)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
        }

        // int32 damage = 4;
        if (this->_internal_damage() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_damage(), target);
        }

        // double time_until_skill_available = 5;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_time_until_skill_available = this->_internal_time_until_skill_available();
        uint64_t raw_time_until_skill_available;
        memcpy(&raw_time_until_skill_available, &tmp_time_until_skill_available, sizeof(tmp_time_until_skill_available));
        if (raw_time_until_skill_available != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_time_until_skill_available(), target);
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this->_internal_place(), target
            );
        }

        // .protobuf.PropType prop = 7;
        if (this->_internal_prop() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                7, this->_internal_prop(), target
            );
        }

        // .protobuf.ButcherType butcher_type = 8;
        if (this->_internal_butcher_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                8, this->_internal_butcher_type(), target
            );
        }

        // int64 guid = 9;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_guid(), target);
        }

        // bool movable = 10;
        if (this->_internal_movable() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_movable(), target);
        }

        // int64 player_id = 11;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_player_id(), target);
        }

        // int32 view_range = 12;
        if (this->_internal_view_range() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_view_range(), target);
        }

        // int32 radius = 13;
        if (this->_internal_radius() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_radius(), target);
        }

        // repeated .protobuf.ButcherBuffType buff = 14;
        {
            int byte_size = _impl_._buff_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    14, _impl_.buff_, byte_size, target
                );
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfButcher)
        return target;
    }

    size_t MessageOfButcher::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfButcher)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.ButcherBuffType buff = 14;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_buff_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_buff(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._buff_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
        }

        // int32 damage = 4;
        if (this->_internal_damage() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
        }

        // double time_until_skill_available = 5;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_time_until_skill_available = this->_internal_time_until_skill_available();
        uint64_t raw_time_until_skill_available;
        memcpy(&raw_time_until_skill_available, &tmp_time_until_skill_available, sizeof(tmp_time_until_skill_available));
        if (raw_time_until_skill_available != 0)
        {
            total_size += 1 + 8;
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_place());
        }

        // .protobuf.PropType prop = 7;
        if (this->_internal_prop() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_prop());
        }

        // int64 guid = 9;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // .protobuf.ButcherType butcher_type = 8;
        if (this->_internal_butcher_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_butcher_type());
        }

        // bool movable = 10;
        if (this->_internal_movable() != 0)
        {
            total_size += 1 + 1;
        }

        // int64 player_id = 11;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int32 view_range = 12;
        if (this->_internal_view_range() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_view_range());
        }

        // int32 radius = 13;
        if (this->_internal_radius() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_radius());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfButcher::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfButcher::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfButcher::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfButcher::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfButcher*>(&to_msg);
        auto& from = static_cast<const MessageOfButcher&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfButcher)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.buff_.MergeFrom(from._impl_.buff_);
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_speed() != 0)
        {
            _this->_internal_set_speed(from._internal_speed());
        }
        if (from._internal_damage() != 0)
        {
            _this->_internal_set_damage(from._internal_damage());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_time_until_skill_available = from._internal_time_until_skill_available();
        uint64_t raw_time_until_skill_available;
        memcpy(&raw_time_until_skill_available, &tmp_time_until_skill_available, sizeof(tmp_time_until_skill_available));
        if (raw_time_until_skill_available != 0)
        {
            _this->_internal_set_time_until_skill_available(from._internal_time_until_skill_available());
        }
        if (from._internal_place() != 0)
        {
            _this->_internal_set_place(from._internal_place());
        }
        if (from._internal_prop() != 0)
        {
            _this->_internal_set_prop(from._internal_prop());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        if (from._internal_butcher_type() != 0)
        {
            _this->_internal_set_butcher_type(from._internal_butcher_type());
        }
        if (from._internal_movable() != 0)
        {
            _this->_internal_set_movable(from._internal_movable());
        }
        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_view_range() != 0)
        {
            _this->_internal_set_view_range(from._internal_view_range());
        }
        if (from._internal_radius() != 0)
        {
            _this->_internal_set_radius(from._internal_radius());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfButcher::CopyFrom(const MessageOfButcher& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfButcher)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfButcher::IsInitialized() const
    {
        return true;
    }

    void MessageOfButcher::InternalSwap(MessageOfButcher* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.buff_.InternalSwap(&other->_impl_.buff_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfButcher, _impl_.radius_) + sizeof(MessageOfButcher::_impl_.radius_) - PROTOBUF_FIELD_OFFSET(MessageOfButcher, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfButcher::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[1]
        );
    }

    // ===================================================================

    class MessageOfProp::_Internal
    {
    public:
    };

    MessageOfProp::MessageOfProp(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfProp)
    }
    MessageOfProp::MessageOfProp(const MessageOfProp& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfProp* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.y_){}, decltype(_impl_.place_){}, decltype(_impl_.guid_){}, decltype(_impl_.size_){}, decltype(_impl_.is_moving_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_moving_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_moving_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfProp)
    }

    inline void MessageOfProp::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.y_){0}, decltype(_impl_.place_){0}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.size_){0}, decltype(_impl_.is_moving_){false}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfProp::~MessageOfProp()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfProp)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfProp::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfProp::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfProp::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfProp)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_moving_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_moving_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.PropType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.PlaceType place = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_place(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 size = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool is_moving = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64))
                    {
                        _impl_.is_moving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfProp::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfProp)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_guid(), target);
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this->_internal_place(), target
            );
        }

        // int32 size = 7;
        if (this->_internal_size() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_size(), target);
        }

        // bool is_moving = 8;
        if (this->_internal_is_moving() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_moving(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfProp)
        return target;
    }

    size_t MessageOfProp::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfProp)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // .protobuf.PlaceType place = 6;
        if (this->_internal_place() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_place());
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // int32 size = 7;
        if (this->_internal_size() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
        }

        // bool is_moving = 8;
        if (this->_internal_is_moving() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfProp::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfProp::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfProp::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfProp*>(&to_msg);
        auto& from = static_cast<const MessageOfProp&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfProp)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_place() != 0)
        {
            _this->_internal_set_place(from._internal_place());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        if (from._internal_size() != 0)
        {
            _this->_internal_set_size(from._internal_size());
        }
        if (from._internal_is_moving() != 0)
        {
            _this->_internal_set_is_moving(from._internal_is_moving());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfProp::CopyFrom(const MessageOfProp& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfProp)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfProp::IsInitialized() const
    {
        return true;
    }

    void MessageOfProp::InternalSwap(MessageOfProp* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfProp, _impl_.is_moving_) + sizeof(MessageOfProp::_impl_.is_moving_) - PROTOBUF_FIELD_OFFSET(MessageOfProp, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfProp::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[2]
        );
    }

    // ===================================================================

    class MessageOfPickedProp::_Internal
    {
    public:
    };

    MessageOfPickedProp::MessageOfPickedProp(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfPickedProp)
    }
    MessageOfPickedProp::MessageOfPickedProp(const MessageOfPickedProp& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfPickedProp* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.mapping_id_){}, decltype(_impl_.y_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfPickedProp)
    }

    inline void MessageOfPickedProp::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.mapping_id_){int64_t{0}}, decltype(_impl_.y_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfPickedProp::~MessageOfPickedProp()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfPickedProp)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfPickedProp::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfPickedProp::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfPickedProp::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfPickedProp)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfPickedProp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.PropType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::PropType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 mapping_id = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.mapping_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfPickedProp::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfPickedProp)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_mapping_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfPickedProp)
        return target;
    }

    size_t MessageOfPickedProp::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfPickedProp)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.PropType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mapping_id());
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfPickedProp::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfPickedProp::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfPickedProp::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfPickedProp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfPickedProp*>(&to_msg);
        auto& from = static_cast<const MessageOfPickedProp&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfPickedProp)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_mapping_id() != 0)
        {
            _this->_internal_set_mapping_id(from._internal_mapping_id());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfPickedProp::CopyFrom(const MessageOfPickedProp& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfPickedProp)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfPickedProp::IsInitialized() const
    {
        return true;
    }

    void MessageOfPickedProp::InternalSwap(MessageOfPickedProp* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfPickedProp, _impl_.y_) + sizeof(MessageOfPickedProp::_impl_.y_) - PROTOBUF_FIELD_OFFSET(MessageOfPickedProp, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfPickedProp::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[3]
        );
    }

    // ===================================================================

    class MessageOfMap_Row::_Internal
    {
    public:
    };

    MessageOfMap_Row::MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap.Row)
    }
    MessageOfMap_Row::MessageOfMap_Row(const MessageOfMap_Row& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfMap_Row* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.col_){from._impl_.col_}, /*decltype(_impl_._col_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap.Row)
    }

    inline void MessageOfMap_Row::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.col_){arena}, /*decltype(_impl_._col_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfMap_Row::~MessageOfMap_Row()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfMap.Row)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfMap_Row::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.col_.~RepeatedField();
    }

    void MessageOfMap_Row::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfMap_Row::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap.Row)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.col_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfMap_Row::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.PlaceType col = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_col(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 8)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_col(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfMap_Row::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap.Row)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.PlaceType col = 1;
        {
            int byte_size = _impl_._col_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    1, _impl_.col_, byte_size, target
                );
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap.Row)
        return target;
    }

    size_t MessageOfMap_Row::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap.Row)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.PlaceType col = 1;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_col_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_col(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._col_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap_Row::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfMap_Row::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfMap_Row::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfMap_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfMap_Row*>(&to_msg);
        auto& from = static_cast<const MessageOfMap_Row&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap.Row)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.col_.MergeFrom(from._impl_.col_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfMap_Row::CopyFrom(const MessageOfMap_Row& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap.Row)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfMap_Row::IsInitialized() const
    {
        return true;
    }

    void MessageOfMap_Row::InternalSwap(MessageOfMap_Row* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.col_.InternalSwap(&other->_impl_.col_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap_Row::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[4]
        );
    }

    // ===================================================================

    class MessageOfMap::_Internal
    {
    public:
    };

    MessageOfMap::MessageOfMap(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap)
    }
    MessageOfMap::MessageOfMap(const MessageOfMap& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfMap* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.row_){from._impl_.row_}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap)
    }

    inline void MessageOfMap::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.row_){arena}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfMap::~MessageOfMap()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfMap)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfMap::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.row_.~RepeatedPtrField();
    }

    void MessageOfMap::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfMap::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.row_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.MessageOfMap.Row row = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_row(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfMap::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfMap.Row row = 2;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_row_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_row(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap)
        return target;
    }

    size_t MessageOfMap::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfMap.Row row = 2;
        total_size += 1UL * this->_internal_row_size();
        for (const auto& msg : this->_impl_.row_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfMap::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfMap::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfMap*>(&to_msg);
        auto& from = static_cast<const MessageOfMap&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.row_.MergeFrom(from._impl_.row_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfMap::CopyFrom(const MessageOfMap& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfMap::IsInitialized() const
    {
        return true;
    }

    void MessageOfMap::InternalSwap(MessageOfMap* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.row_.InternalSwap(&other->_impl_.row_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[5]
        );
    }

    // ===================================================================

    class MessageToClient::_Internal
    {
    public:
        static const ::protobuf::MessageOfMap& map_message(const MessageToClient* msg);
    };

    const ::protobuf::MessageOfMap&
        MessageToClient::_Internal::map_message(const MessageToClient* msg)
    {
        return *msg->_impl_.map_message_;
    }
    MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageToClient)
    }
    MessageToClient::MessageToClient(const MessageToClient& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageToClient* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.human_message_){from._impl_.human_message_}, decltype(_impl_.butcher_message_){from._impl_.butcher_message_}, decltype(_impl_.prop_message_){from._impl_.prop_message_}, decltype(_impl_.map_message_){nullptr}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_map_message())
        {
            _this->_impl_.map_message_ = new ::protobuf::MessageOfMap(*from._impl_.map_message_);
        }
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageToClient)
    }

    inline void MessageToClient::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.human_message_){arena}, decltype(_impl_.butcher_message_){arena}, decltype(_impl_.prop_message_){arena}, decltype(_impl_.map_message_){nullptr}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageToClient::~MessageToClient()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageToClient)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageToClient::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.human_message_.~RepeatedPtrField();
        _impl_.butcher_message_.~RepeatedPtrField();
        _impl_.prop_message_.~RepeatedPtrField();
        if (this != internal_default_instance())
            delete _impl_.map_message_;
    }

    void MessageToClient::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageToClient::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageToClient)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.human_message_.Clear();
        _impl_.butcher_message_.Clear();
        _impl_.prop_message_.Clear();
        if (GetArenaForAllocation() == nullptr && _impl_.map_message_ != nullptr)
        {
            delete _impl_.map_message_;
        }
        _impl_.map_message_ = nullptr;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageToClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.MessageOfHuman human_message = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_human_message(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.MessageOfButcher butcher_message = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_butcher_message(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.MessageOfProp prop_message = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_prop_message(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfMap map_message = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_map_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageToClient::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageToClient)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfHuman human_message = 1;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_human_message_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_human_message(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
        }

        // repeated .protobuf.MessageOfButcher butcher_message = 2;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_butcher_message_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_butcher_message(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
        }

        // repeated .protobuf.MessageOfProp prop_message = 3;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_prop_message_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_prop_message(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfMap map_message = 4;
        if (this->_internal_has_map_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(4, _Internal::map_message(this), _Internal::map_message(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageToClient)
        return target;
    }

    size_t MessageToClient::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageToClient)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfHuman human_message = 1;
        total_size += 1UL * this->_internal_human_message_size();
        for (const auto& msg : this->_impl_.human_message_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // repeated .protobuf.MessageOfButcher butcher_message = 2;
        total_size += 1UL * this->_internal_butcher_message_size();
        for (const auto& msg : this->_impl_.butcher_message_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // repeated .protobuf.MessageOfProp prop_message = 3;
        total_size += 1UL * this->_internal_prop_message_size();
        for (const auto& msg : this->_impl_.prop_message_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // .protobuf.MessageOfMap map_message = 4;
        if (this->_internal_has_map_message())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *_impl_.map_message_
                          );
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClient::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageToClient::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageToClient::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageToClient*>(&to_msg);
        auto& from = static_cast<const MessageToClient&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageToClient)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.human_message_.MergeFrom(from._impl_.human_message_);
        _this->_impl_.butcher_message_.MergeFrom(from._impl_.butcher_message_);
        _this->_impl_.prop_message_.MergeFrom(from._impl_.prop_message_);
        if (from._internal_has_map_message())
        {
            _this->_internal_mutable_map_message()->::protobuf::MessageOfMap::MergeFrom(
                from._internal_map_message()
            );
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageToClient::CopyFrom(const MessageToClient& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageToClient)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageToClient::IsInitialized() const
    {
        return true;
    }

    void MessageToClient::InternalSwap(MessageToClient* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.human_message_.InternalSwap(&other->_impl_.human_message_);
        _impl_.butcher_message_.InternalSwap(&other->_impl_.butcher_message_);
        _impl_.prop_message_.InternalSwap(&other->_impl_.prop_message_);
        swap(_impl_.map_message_, other->_impl_.map_message_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[6]
        );
    }

    // ===================================================================

    class MoveRes::_Internal
    {
    public:
    };

    MoveRes::MoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MoveRes)
    }
    MoveRes::MoveRes(const MoveRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MoveRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.actual_speed_){}, decltype(_impl_.actual_angle_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.actual_speed_, &from._impl_.actual_speed_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actual_angle_) - reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.actual_angle_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MoveRes)
    }

    inline void MoveRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.actual_speed_){int64_t{0}}, decltype(_impl_.actual_angle_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MoveRes::~MoveRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.MoveRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MoveRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MoveRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MoveRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MoveRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.actual_speed_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.actual_angle_) - reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.actual_angle_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MoveRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 actual_speed = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.actual_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double actual_angle = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17))
                    {
                        _impl_.actual_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MoveRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MoveRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 actual_speed = 1;
        if (this->_internal_actual_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_actual_speed(), target);
        }

        // double actual_angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = this->_internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_actual_angle(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MoveRes)
        return target;
    }

    size_t MoveRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MoveRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 actual_speed = 1;
        if (this->_internal_actual_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_actual_speed());
        }

        // double actual_angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = this->_internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            total_size += 1 + 8;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MoveRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MoveRes::GetClassData() const
    {
        return &_class_data_;
    }

    void MoveRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MoveRes*>(&to_msg);
        auto& from = static_cast<const MoveRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MoveRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_actual_speed() != 0)
        {
            _this->_internal_set_actual_speed(from._internal_actual_speed());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = from._internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            _this->_internal_set_actual_angle(from._internal_actual_angle());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MoveRes::CopyFrom(const MoveRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MoveRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MoveRes::IsInitialized() const
    {
        return true;
    }

    void MoveRes::InternalSwap(MoveRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.actual_angle_) + sizeof(MoveRes::_impl_.actual_angle_) - PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.actual_speed_)>(
            reinterpret_cast<char*>(&_impl_.actual_speed_),
            reinterpret_cast<char*>(&other->_impl_.actual_speed_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MoveRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[7]
        );
    }

    // ===================================================================

    class BoolRes::_Internal
    {
    public:
    };

    BoolRes::BoolRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.BoolRes)
    }
    BoolRes::BoolRes(const BoolRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        BoolRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.act_success_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _this->_impl_.act_success_ = from._impl_.act_success_;
        // @@protoc_insertion_point(copy_constructor:protobuf.BoolRes)
    }

    inline void BoolRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.act_success_){false}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    BoolRes::~BoolRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.BoolRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void BoolRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void BoolRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void BoolRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.BoolRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.act_success_ = false;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* BoolRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // bool act_success = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* BoolRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.BoolRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // bool act_success = 1;
        if (this->_internal_act_success() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_act_success(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.BoolRes)
        return target;
    }

    size_t BoolRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.BoolRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // bool act_success = 1;
        if (this->_internal_act_success() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        BoolRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* BoolRes::GetClassData() const
    {
        return &_class_data_;
    }

    void BoolRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<BoolRes*>(&to_msg);
        auto& from = static_cast<const BoolRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.BoolRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_act_success() != 0)
        {
            _this->_internal_set_act_success(from._internal_act_success());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void BoolRes::CopyFrom(const BoolRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.BoolRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool BoolRes::IsInitialized() const
    {
        return true;
    }

    void BoolRes::InternalSwap(BoolRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.act_success_, other->_impl_.act_success_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata BoolRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[8]
        );
    }

    // ===================================================================

    class MsgRes::_Internal
    {
    public:
    };

    MsgRes::MsgRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MsgRes)
    }
    MsgRes::MsgRes(const MsgRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MsgRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.message_received_){}, decltype(_impl_.from_player_id_){}, decltype(_impl_.have_message_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.message_received_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_received_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_message_received().empty())
        {
            _this->_impl_.message_received_.Set(from._internal_message_received(), _this->GetArenaForAllocation());
        }
        ::memcpy(&_impl_.from_player_id_, &from._impl_.from_player_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.have_message_) - reinterpret_cast<char*>(&_impl_.from_player_id_)) + sizeof(_impl_.have_message_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MsgRes)
    }

    inline void MsgRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.message_received_){}, decltype(_impl_.from_player_id_){int64_t{0}}, decltype(_impl_.have_message_){false}, /*decltype(_impl_._cached_size_)*/ {}};
        _impl_.message_received_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_received_.Set("", GetArenaForAllocation());
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    MsgRes::~MsgRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.MsgRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MsgRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.message_received_.Destroy();
    }

    void MsgRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MsgRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MsgRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.message_received_.ClearToEmpty();
        ::memset(&_impl_.from_player_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.have_message_) - reinterpret_cast<char*>(&_impl_.from_player_id_)) + sizeof(_impl_.have_message_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MsgRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // bool have_message = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.have_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 from_player_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.from_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // string message_received = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        auto str = _internal_mutable_message_received();
                        ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(ptr);
                        CHK_(::_pbi::VerifyUTF8(str, "protobuf.MsgRes.message_received"));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MsgRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MsgRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // bool have_message = 1;
        if (this->_internal_have_message() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_have_message(), target);
        }

        // int64 from_player_id = 2;
        if (this->_internal_from_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_from_player_id(), target);
        }

        // string message_received = 3;
        if (!this->_internal_message_received().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_message_received().data(), static_cast<int>(this->_internal_message_received().length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "protobuf.MsgRes.message_received"
            );
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_message_received(), target
            );
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MsgRes)
        return target;
    }

    size_t MsgRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MsgRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string message_received = 3;
        if (!this->_internal_message_received().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_message_received()
                          );
        }

        // int64 from_player_id = 2;
        if (this->_internal_from_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_from_player_id());
        }

        // bool have_message = 1;
        if (this->_internal_have_message() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MsgRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MsgRes::GetClassData() const
    {
        return &_class_data_;
    }

    void MsgRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MsgRes*>(&to_msg);
        auto& from = static_cast<const MsgRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MsgRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_message_received().empty())
        {
            _this->_internal_set_message_received(from._internal_message_received());
        }
        if (from._internal_from_player_id() != 0)
        {
            _this->_internal_set_from_player_id(from._internal_from_player_id());
        }
        if (from._internal_have_message() != 0)
        {
            _this->_internal_set_have_message(from._internal_have_message());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MsgRes::CopyFrom(const MsgRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MsgRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MsgRes::IsInitialized() const
    {
        return true;
    }

    void MsgRes::InternalSwap(MsgRes* other)
    {
        using std::swap;
        auto* lhs_arena = GetArenaForAllocation();
        auto* rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.message_received_, lhs_arena, &other->_impl_.message_received_, rhs_arena
        );
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MsgRes, _impl_.have_message_) + sizeof(MsgRes::_impl_.have_message_) - PROTOBUF_FIELD_OFFSET(MsgRes, _impl_.from_player_id_)>(
            reinterpret_cast<char*>(&_impl_.from_player_id_),
            reinterpret_cast<char*>(&other->_impl_.from_player_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MsgRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[9]
        );
    }

    // @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfHuman*
    Arena::CreateMaybeMessage<::protobuf::MessageOfHuman>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfHuman>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfButcher*
    Arena::CreateMaybeMessage<::protobuf::MessageOfButcher>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfButcher>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfProp*
    Arena::CreateMaybeMessage<::protobuf::MessageOfProp>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfProp>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfPickedProp*
    Arena::CreateMaybeMessage<::protobuf::MessageOfPickedProp>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfPickedProp>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfMap_Row*
    Arena::CreateMaybeMessage<::protobuf::MessageOfMap_Row>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfMap_Row>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfMap*
    Arena::CreateMaybeMessage<::protobuf::MessageOfMap>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfMap>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageToClient*
    Arena::CreateMaybeMessage<::protobuf::MessageToClient>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageToClient>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MoveRes*
    Arena::CreateMaybeMessage<::protobuf::MoveRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MoveRes>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::BoolRes*
    Arena::CreateMaybeMessage<::protobuf::BoolRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::BoolRes>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MsgRes*
    Arena::CreateMaybeMessage<::protobuf::MsgRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MsgRes>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
